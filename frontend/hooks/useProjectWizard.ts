/**
 * Custom hook for project wizard state management
 */

import { useState, useCallback } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { wizardSchema, type WizardFormData } from '@/lib/wizard-schema';
import { DEFAULT_FEATURES_BY_TEMPLATE } from '@/lib/wizard-constants';
import type { ProjectCreate } from '@/types/project';

interface UseProjectWizardProps {
  onComplete: (data: ProjectCreate) => Promise<void>;
}

export function useProjectWizard({ onComplete }: UseProjectWizardProps) {
  const [currentStep, setCurrentStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<WizardFormData>({
    resolver: zodResolver(wizardSchema),
    mode: 'onChange',
    defaultValues: {
      name: '',
      description: '',
      template_id: 'agile_basic',
      sprint_pattern: 'yy_q_num',
      sprint_duration_weeks: 2,
      working_days: [1, 2, 3, 4, 5], // Monday to Friday
      hours_per_day: 8,
      holidays: [],
      features: DEFAULT_FEATURES_BY_TEMPLATE.agile_basic,
    },
  });

  const totalSteps = 5;

  const nextStep = useCallback(async () => {
    let isValid = false;

    // Validate current step fields
    switch (currentStep) {
      case 1:
        isValid = await form.trigger(['name', 'description', 'template_id']);
        break;
      case 2:
        isValid = await form.trigger([
          'sprint_pattern',
          'sprint_duration_weeks',
          'working_days',
          'hours_per_day',
        ]);
        break;
      case 3:
        isValid = await form.trigger(['holidays']);
        break;
      case 4:
        isValid = await form.trigger(['features']);
        break;
      default:
        isValid = true;
    }

    if (isValid && currentStep < totalSteps) {
      setCurrentStep((prev) => prev + 1);
    }

    return isValid;
  }, [currentStep, form, totalSteps]);

  const prevStep = useCallback(() => {
    if (currentStep > 1) {
      setCurrentStep((prev) => prev - 1);
    }
  }, [currentStep]);

  const goToStep = useCallback((step: number) => {
    if (step >= 1 && step <= totalSteps) {
      setCurrentStep(step);
    }
  }, [totalSteps]);

  const handleSubmit = form.handleSubmit(async (data) => {
    setIsSubmitting(true);

    try {
      // Transform wizard data to API format
      const projectData: ProjectCreate = {
        name: data.name,
        description: data.description || undefined,
        template_id: data.template_id,
        configuration: {
          project_id: undefined, // Auto-generated by backend
          project_name: data.name,
          sprint_pattern: data.sprint_pattern,
          sprint_duration_weeks: data.sprint_duration_weeks,
          working_days: data.working_days,
          holidays: data.holidays,
          hours_per_day: data.hours_per_day,
          features: data.features,
        },
      };

      await onComplete(projectData);
    } catch (error) {
      console.error('Failed to create project:', error);
      throw error;
    } finally {
      setIsSubmitting(false);
    }
  });

  // Update features when template changes
  const handleTemplateChange = useCallback(
    (templateId: string) => {
      const defaultFeatures =
        DEFAULT_FEATURES_BY_TEMPLATE[templateId] ||
        DEFAULT_FEATURES_BY_TEMPLATE.agile_basic;

      form.setValue('template_id', templateId);
      form.setValue('features', defaultFeatures);
    },
    [form]
  );

  // Add holiday from preset
  const addHolidayPreset = useCallback(
    (holidays: string[]) => {
      const currentHolidays = form.getValues('holidays');
      const uniqueHolidays = Array.from(
        new Set([...currentHolidays, ...holidays])
      ).sort();

      form.setValue('holidays', uniqueHolidays);
    },
    [form]
  );

  // Remove holiday
  const removeHoliday = useCallback(
    (date: string) => {
      const currentHolidays = form.getValues('holidays');
      form.setValue(
        'holidays',
        currentHolidays.filter((h) => h !== date)
      );
    },
    [form]
  );

  // Add custom holiday
  const addHoliday = useCallback(
    (date: string) => {
      const currentHolidays = form.getValues('holidays');
      if (!currentHolidays.includes(date)) {
        form.setValue('holidays', [...currentHolidays, date].sort());
      }
    },
    [form]
  );

  return {
    form,
    currentStep,
    totalSteps,
    isSubmitting,
    nextStep,
    prevStep,
    goToStep,
    handleSubmit,
    handleTemplateChange,
    addHolidayPreset,
    removeHoliday,
    addHoliday,
  };
}
