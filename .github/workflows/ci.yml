name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_sprintforge
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run backend linting
      run: |
        cd backend
        black --check .
        isort --check-only .
        flake8 .
        mypy app/
        
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_sprintforge
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=term-missing
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
        npm run type-check
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:coverage
        
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

  # TODO: Add integration tests when Docker setup is ready
  # integration-tests:
  #   runs-on: ubuntu-latest
  #   needs: [test-backend, test-frontend]
  #
  #   steps:
  #   - uses: actions/checkout@v4
  #
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #
  #   - name: Build and test with Docker Compose
  #     run: |
  #       docker-compose -f docker-compose.dev.yml build
  #       docker-compose -f docker-compose.dev.yml up -d
  #
  #       # Wait for services to be ready
  #       sleep 30
  #
  #       # Run integration tests
  #       docker-compose exec -T backend pytest tests/integration/
  #
  #       # Cleanup
  #       docker-compose down

  # TODO: Add deployment when ready for production
  # build-and-deploy:
  #   runs-on: ubuntu-latest
  #   needs: [test-backend, test-frontend]
  #   if: github.ref == 'refs/heads/main'
  #
  #   steps:
  #   - uses: actions/checkout@v4
  #
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #
  #   - name: Login to Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
  #       password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
  #
  #   - name: Build and push images
  #     run: |
  #       # Will be implemented when deployment infrastructure is ready
  #       echo "Deployment pipeline will be added in Sprint 6"